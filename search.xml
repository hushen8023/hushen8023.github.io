<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从SSH单体应用到微服务架构-4]]></title>
    <url>%2F2017%2F09%2F26%2F%E4%BB%8ESSH%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-4%2F</url>
    <content type="text"><![CDATA[在支付系统改进中，我们对原有系统做了整体的评估，选择支付网关作为入手点来进行微服务架构的改进。这里详细介绍我们针对该模块的改进过程，供参考。 原有系统情况早期启动的时候，对接的支付渠道不多，所有支付渠道和支付网关都实现在一个项目中，部署在一起。其中支付网关是整个项目的核心和入手点。它为各个业务方提供支付全流程的调用接口，签约、代扣、支付、验证，都是通过这个接口来实现的。整个系统使用SSH框架，架构如下：业务流程如下： &nbsp;&nbsp;&nbsp;&nbsp;1. 当接口被调用时， 首先执行参数校验，确认输入的参数的合法性，验证参数签名是否正确。确认过程包括调用账户、用户、支付方式、路由等服务来验证用户ID、账户、支付卡号、支付金额等参数。 &nbsp;&nbsp;&nbsp;&nbsp;2. 根据输入的支付方式，调用支付路由服务，获取对应的支付渠道。 &nbsp;&nbsp;&nbsp;&nbsp;3. 调用风控接口进行验证，如果有交易风险，则阻断本次交易。 &nbsp;&nbsp;&nbsp;&nbsp;4. 生成交易记录。 &nbsp;&nbsp;&nbsp;&nbsp;5. 调用支付渠道提供的服务执行支付。 &nbsp;&nbsp;&nbsp;&nbsp;6. 根据支付结果，更新订单状态。 &nbsp;&nbsp;&nbsp;&nbsp;7. 通知商户订单执行结果。 在实现上，原有系统实现的类结构图如下： &nbsp;&nbsp;&nbsp;&nbsp;1. 采用SSH架构，支付网关实现为一个大Apache Struts Action类，和支付相关的所有业务逻辑都实现在一个项目中。 &nbsp;&nbsp;&nbsp;&nbsp;2. 支付网关承载大量的功能，实际上，它是将API网关和业务逻辑都混在在一起实现。 签约、支付、代扣、验证，都在这一个类中实现，代码行数超过1000行，逻辑十分复杂。 &nbsp;&nbsp;&nbsp;&nbsp;3. 除了风控是进程外调动，其他的服务都是进程内调用，通过springframework来管理各个service。 &nbsp;&nbsp;&nbsp;&nbsp;4. 最终落地调用的支付渠道，是通过抽象的接口来对网关封装渠道的差异。 最终在这个系统中对接了有30多个渠道，类规模达到2000个。随着业务发展，问题越来越多。高峰期同时有5个渠道在并行开发，还有大量的其他渠道对接问题需要修复。多个人同时修改一个项目代码导致版本控制的工作骤增。上线频发引起服务中断也让业务方很不满。对支付网关的改进是一个循序渐进的过程。这里参考Arun Gupta的微服务六种设计模式，来描述我们所做的改进。 新网关设计 (Chain Pattern)为了分解旧网关的功能， 我们设计了新的网关。在处理流程上，将其分为三个步骤，采用的是chain模式。 链式模式，如上图所示，它调用服务A来获取结果，而服务A是通过服务B来交互，B则会和C有交互。 整个过程类似同步的HTTP请求、响应处理。 这其中每个阶段的调用，都是阻塞式的同步调用。每一步都会增加一些业务逻辑处理。 原支付网关难以维护的一个重要原因是其所承载的功能过多。我们首先根据用户的使用场景，将支付网关承载的功能，按照支付产品来进行切分。 支付产品包括快捷支付、网银支付、外卡支付等。 不同的产品，其对应的操作所使用的参数和流程也不一样。以快捷产品为例， 新网关接收到请求后，根据用户所选择的支付类型，分发到快捷支付产品接口。快捷支付产品接口调用工行借记卡通道来执行支付，通道最终落地到工行接口的调用来实现支付。 支付操作完成后，工行接口通知到通道，通道通知到产品，最终逆向传递到网关接口，并最终发送给调用方。 在这里面，支付网关负责分发、验签等基本功能，支付产品负责参数校验、路由、生成交易记录等功能。最终的支付操作是落地到支付渠道去执行。 网关拆分(Proxy Pattern)如上所述，支付网关按照使用场景进行拆分。我们采用完善一个、接入一个的原则，在保留旧网关的功能的同时，开发完善新的网关和支付产品。等所有流量都打到新网关上去之后，旧网关就直接废弃了。为了达到这个目标，我们引入了代理模式： 代理模式和聚合模式类似，不同点在于，它会根据业务逻辑需要仅选择一个微服务来调用。微服务中，我们经常会用代理模式来构建API网关。 我们首先按照所支持的支付方式，对支付网关做分解，拆分为为网银、快捷、话费、账户、外卡、虚币等支付产品。新网关接口模块是一个proxy，本身并未实现任何业务逻辑，它的工作是将用户请求发送给合适的支付产品去处理。如果这个产品还没有实现，则将其转发到老网关去执行。这样带来的好处是，我们不需要对老网关做任何改动。而且，如果某个支付产品在重构过程中出现问题，我们可以很快切回到老网关去。 支付产品 (Aggregator Pattern)支付产品是对原有支付网关的业务流程实现的一个重构，按照各个支付产品所支持的功能以及流程来简化原混合在一起的设计。比如快捷支付需要签约和支付，而网银支付则不需要签约。 在支付产品本身的实现上，我们使用的是聚合模式。 聚合是最常见的微服务设计模式，它是一个高层次的微服务组合，供其他服务调用。 在这种情况下，聚合器会从其他的微服务中收集数据，做业务逻辑处理，然后发布成一个服务终端。其他有需要的服务可以调用它。 聚合器设计的要点是要遵循DRY(Don’t Repeat Yourself)原则。如果有多个服务需要访问A，B，C服务，那建议的处理方式是，针对这些使用，提炼一个处理逻辑出来，将A、B、C封装为一个新的服务，这个服务可以独立的演化。 支付产品中调用的各个服务，包括支付方式管理， 支付服务管理，支付路由管理、支付记录管理等，都被重构为微服务，在支付产品的实现中，通过Aggregator 模式进行调用。 在支付产品的实现流程中，首先需要对参数进行校验，校验成功后，调用风控检查该交易是否可以放行。这两个操作，在处理上可以并行，使用的是分支模式。 分支模式是聚合模式的扩展，可以允许同时调用两个或者更多的微服务。 如上，采用分支模式， 使得数据校验和风控可以并发执行。由于风控相对耗时较长，而订单中需要校验的数据较多，这两个操作有必要并发执行。 支付通道 (Aggregator Pattern)支付路由根据用户选择的支付方式对支付通道进行筛选，选取合适的支付通道。支付产品调用该通道的接口来最终落地完成支付服务。 每个支付通道对接也被实现为微服务，在支付产品中调用。 通知商户 (Asynchronous Messaging Pattern)支付产品执行的最后一个步骤是通知调用方支付的结果。 原系统实现是将这个步骤耦合在原有代码中，容易受到调用方接口的稳定性的影响。 为此，这里采用异步消息的模式来进行重构： 异步消息一般用于对流程中可以异步执行的操作做分解，将它从原流程中分离出来，通过消息机制来异步执行。 支付产品在完成支付服务后，发出消息到订单消息队列中。 商户回调处理程序接收到消息后，调用商户回调接口告知支付结果。 此外，风控、BI系统等，也可以使用这个消息来同步订单数据。 总结这里简单介绍了支付网关重构的过程，以及如何使用微服务设计模式。 当然，这里我们也忽略了很多细节，比如支付网关所依赖的基础服务的开发。 最终的支付网关的架构，参考《支付网关设计》一文。这里涉及到的支付路由、支付记录、支付风控等模块的设计，后续也会在本博客中做介绍。 微服务化改造并不难，需要的是对原有系统有深入的了解，然后运用各种模式来拆分，庖丁解牛。拆分的每一步都需要注意，在设计上，需要考虑一旦出现问题即可回滚。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>微服务</tag>
        <tag>SSH</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从SSH单体应用到微服务架构-3]]></title>
    <url>%2F2017%2F09%2F26%2F%E4%BB%8ESSH%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-3%2F</url>
    <content type="text"><![CDATA[随着系统改进工作的进行，一些架构性的问题也越来越突出。在开发中，一个遗留接口是否要迁移到微服务架构上，哪些接口应该放到同一个项目上，项目应该如何组织，日志、监控等基础性的工作应该怎么统一规划，都需要从架构的层面来进行设计。 确定目标公司每一年都会有一个明确的战略目标，这个目标最终会被分解到每个业务上去实施。 对于支付业务，我们的目标是： 持续提升支付成功率 支付成功率是支付业务的最高衡量指标。提升成功率的首要措施是提升系统的稳定性，在此基础上，通过简化支付流程、优化支付路由等措施，提升转化率。 持续降低支付成本 在保证支付的稳定的前提下，引入更多底成本的渠道，通过支持渠道优惠活动等措施，来降低支付成本。 支持进入新市场 配合公司的市场拓展需求，为新市场提供支付支持。 制定原则为了和目标保持一致，我们制定了一些微服务的架构规则。当然，这些规则也是随着团队的进步、业务的变更做调整。 我们的原则是参考Heroku的12 Factor而制定的。 以下原则是在刚启动微服务架构改进的时候制定的。 虚机开发 所有开发工作必须在虚机上进行，不得使用个人物理机开发。这使得开发人员能够随时在任何地方调起开发环境，避免由于环境配置问题而影响问题修复。 版本控制 使用Git做版本控制。 每个项目都有一个基准代码库，部署时从主干获取代码。上线时对主干打Tag，每个Tag对应一个线上可执行代码。 测试环境、预部署环境和线上环境都使用相同的基准代码。 代码审核 为了保证代码质量，所有代码必须通过至少两位工程师的审核才可以签入到主干版本中。执行日常代码审核，避免在部署前进行突击式审核。 自动部署 开发人员不得直接将开发机上的构件推送到测试、线上环境。 build, release和run必须分离。 自动部署系统（Jenkins）将从版本控制服务器上下载代码，编译并发布到各个stage server上。 横向扩展 所有系统必须可以通过多进程部署的方式进行扩展。 这就要求： &nbsp;&nbsp;&nbsp;&nbsp;1. 所有系统可以运行在一个或多个进程中。 但所有进程必须是无状态的，进程之间是无共享的。 对于Web来说，特别注意避免依赖session。如有需要，session需保存在membcached或者redis等内存缓存中。 &nbsp;&nbsp;&nbsp;&nbsp;2. 所有进程运行时动态绑定到端口来提供服务。 &nbsp;&nbsp;&nbsp;&nbsp;3. 避免使用守护进程或者PID文件。 同构环境 确保开发、测试和线上环境的同构。这包括如下内容： &nbsp;&nbsp;&nbsp;&nbsp;1. 各stage下所使用的操作系统环境是一致的。 &nbsp;&nbsp;&nbsp;&nbsp;2. 各stage下所使用的容器是一致的，包括JVM版本、容器版本。 &nbsp;&nbsp;&nbsp;&nbsp;3. 各stage下所使用的数据库及其版本是一致的。 &nbsp;&nbsp;&nbsp;&nbsp;4. 测试和线上环境可以在部署实例数量上不同，但在测试环境中，对于每个系统，至少部署2个实例。 &nbsp;&nbsp;&nbsp;&nbsp;5. 各个stage下的唯一差异是通过配置参数来控制的。 配置参数 与环境相关的配置信息，必须与代码严格分离，包括数据库、第三方证书、域名、和性能有关的配置（线程数、重试间隔等）。配置信息统一使用环境变量来存储。 幂等原则 所有的接口必须实现为幂等的，这包括： &nbsp;&nbsp;&nbsp;&nbsp;1. 该接口在同一个server上可以多次调用； &nbsp;&nbsp;&nbsp;&nbsp;2. 如果某一个server上调用出现网络问题，客户端可以进行重试并将请求转发到另一个server上执行。 启动关闭 每个系统需提供启动、关闭和验证脚本。 &nbsp;&nbsp;&nbsp;&nbsp;1. 系统在启动时执行必要的环境检查，包括不得使用root账户来启动应用、端口是否被占用等。 &nbsp;&nbsp;&nbsp;&nbsp;2. 启动成功后，可以通过验证脚本来确认运行状态。 &nbsp;&nbsp;&nbsp;&nbsp;3. 关闭脚本必须能够优雅终止进程，这包括回退所有的连接、停止接收消息，完成所有待处理的消息，必要时执行回滚等操作。 收集日志 所有日志信息都必须通过终端收集到日志服务器上。 监控报警 所有线上运行的系统，必须配置监控和报警，并落实报警处理人员。 制定规范在原有的Java编码规范的基础上，针对本次技改，我们又制定如下规范： &nbsp;&nbsp;&nbsp;&nbsp;1. 支付系统监控报警规范。在支付系统的监控与报警 一文中有介绍。 &nbsp;&nbsp;&nbsp;&nbsp;2. 支付系统Restful 接口设计规范。 &nbsp;&nbsp;&nbsp;&nbsp;3. 支付系统RPC接口设计规范。 在微服务与RPC一文中有介绍。 这些规范在执行过程中也会不断地进行补充和调整。除了在code review中确保这些规范被落地执行外，每周周会也会对异常执行情况进行分析，确保规范制定是符合实际需求的，并能够与时俱进地进行调整。 当然，最重要的规范，是软件过程的规范：支付系统开发的软件过程规范。在微服务开发的软件过程一文中有详细介绍。 团队建设微服务架构是否能够顺利实施，离不开团队成员的支持，以及团队能力的提升。团队建设一直是整个技改过程的重中之重。 团队建设本身是一个大话题。这里重点介绍我们在团队分工上的工作。 团队的分工和整个架构设计需保持一致（又是康威定律）。在架构设计上，我们采取的整体策略，是参考原有的SSH架构，将业务逻辑和接口实现分离，将进程内调用改造成进程外调用，并在此基础上做切分。 这样，在团队划分上，前期，是按照层来分工，分为如下三个小团队： &nbsp;&nbsp;&nbsp;&nbsp;1. 接口服务团队，开发对外的接口，对接业务系统以及Android，IOS,PCWeb等各端。随着业务的发展在，这个团队也会逐步按照端来进一步分解。 &nbsp;&nbsp;&nbsp;&nbsp;2. 基础服务团队，为对外接口提供业务逻辑服务。这也是最大的一个团队，随着业务的发展，这个团队也会逐步按照业务进行拆分，分裂成账户、支付、交易等小团队。 &nbsp;&nbsp;&nbsp;&nbsp;3. 基础设施团队，负责支持上述工作的各种规范的制定，以及支持这些规范实现的基础设施。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>微服务</tag>
        <tag>SSH</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从SSH单体应用到微服务架构-2]]></title>
    <url>%2F2017%2F09%2F25%2F%E4%BB%8ESSH%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-2%2F</url>
    <content type="text"><![CDATA[技改在任何时候都是个敏感的事情。大量的问题需要摆平，天时地利人和，缺一不可。 天时即选择合适时机进行技术改造工作。在时机的选择上，我们经历了三个阶段。 空闲时段 在开发企业应用时，技术改进也是常见的工作。企业应用开发的特点是有忙有闲。在版本发布前都紧锣密鼓进行开发工作；在老版本发布之后，新版本刚刚启动开发时，有相对空闲时间，可以进行技术改进。 而当这一套方法搬到互联网应用开发上时，却发现基本行不通。互联网应用开发是两种情况：很忙和非常忙。预留大片的时间进行技术改进，几乎是不现实的。如果有业务可以有空闲时间做技改，那基本上也就没必要改了，因为这也意味着这个业务进入稳定和衰退期。 随需改进 既然找不到空闲时段，另一个选择是随需进行，也就是在项目开发过程中，对涉及到的模块进行改进。而在实践中，我们也发现这种做法难度很大。 &nbsp;&nbsp;&nbsp;&nbsp;1. 遗留系统的模块依赖关系往往令人匪夷所思，改进过程中，经常会发现需要对所依赖的底层模块进行大调整，导致改进工作无法进行。 &nbsp;&nbsp;&nbsp;&nbsp;2. 就算是所依赖的模块没有问题，改进工作也会导致更多的时间开销，2~3倍都是正常的。这个延迟不是所有项目都能够承受的。 优化团队 比较适合互联网应用开发的做法，是组建专门团对进行技术改进。预留大约30%的开发能力来进行技改。这些人可以是专门负责架构改进的，也可以从项目组中抽调轮岗。 &nbsp;&nbsp;&nbsp;&nbsp;1. 改进前，制定改进计划，循序将近进行。涉及到具体模块改进时，抽调负责该模块的技术人员来参与。 &nbsp;&nbsp;&nbsp;&nbsp;2. 如果模块改进和业务开发工作同时开展，则可以考虑将这两个工作合并进行。 技改不能一哄而上，也不能蜻蜓点水的做。他是一个持续的过程，循序将近，不要中断。项目紧的时候挑选风险小的任务来执行，少安排几个重构点。项目松的时候重构下核心接口，多安排些重构。但是不要中断。 一旦中断，往往结果是没有人会愿意继续。重构往往是个前人栽树 后人乘凉的事，风险又大，短期看不到效果，大家做着做着，往往就放弃了。所以持续改进是必须的，避免半途而废。 还有一个大家容易忽略的地方，对于特别看重绩效的团队，按照产出来度量工作成果，那必须果断避开绩效考评的这段敏感时期。 地利所谓地利，从软件角度，主要是基础设施的建设。在针对现有系统进行改进，推动微服务架构前，需要评估下当前的基础设施建设是否能够满足要求。 服务所需要的基础设施包括: 虚机环境或者docker 不同服务的线上压力和运行环境需求不同，内存，CPU，磁盘需求也不一样。按照服务需要自动弹性创建所需要的环境，是微服务部署的前置条件。 版本控制软件 版本控制不仅仅是协调人和人之间的协作，同时也是保证线上运行的系统必须是最终正式的版本。一旦出现问题，开发人员可以从版本控制服务器上下载到一致的代码。现在一般用git来实现。为什么不用SVN,网上有很多对比文章，不是本文重点。 代码评审软件 每个微服务作为独立的项目来开发，统一编码规范，审核代码逻辑等，在这场景下犹为重要。和git相配合，gitlab是优先考虑的codereview软件。 集成发布 集群对微服务是必不可少的基础环境，将一个服务部署到几十，甚至上千台机器上是必要的。这种情况下，人工部署是不现实的，依赖于集成发布环境，实现获取版本，集成编译，备份老版本，发布新版本，启动服务，暂停服务和重启服务。推荐使用jenkins。 系统监控 监控自动化也是必要的基础设施。对出问题的服务报警，在高峰期对核心服务进行监控，都必须借助监控系统来处理。推荐使用zabbix。 日志分析 排查错误和对系统进行审查，日志处理是不可避免的。想跟踪某个ID用户的行为，在几百台机器上逐个查看日志也是不现实的。使用工具，如ELK，将日志收集到一个存储中，提供检索功能来查看日志，甚至对日志做统计分析，也是必须的设施。 办公环境 不用说，新老系统开发人员得在一起办公，随时交流。如果条件无法满足，那至少必须建立顺畅的沟通方式，比如QQ群，微信群等。邮件并不是一个好的选择，电话会议也是不错的。 人和最重要的因素。总体上包括三个方面内容，上级领导的支持，团队成员的认可，合作部门的理解。 上级的支持 毫无疑问，上级领导支持是前提条件。重构是高风险的工作，往往不容易立即出新成果，而且还需要额外的投入。几个月内，没有新东西，出货速度变慢，没有其他因素，不是重构就是在怠工。从公司层面，更高层的人越能知道什么时机适合开展重构工作。公司马上要架构调整了，系统快下架了，近期有重大活动需要支持，有人需要尽快出成果来晋升….都需要慎重评估是否可以进行重构，而这些事情，越高层的人掌握的信息越多，所以得到他们的支持是必须的。 团队成员的认可 其次是团队成员们认可。特别是老系统的开发人员，他们认可和毫无保留的支持是必要的条件。他们最清楚系统有哪些坑，哪些是必须改动的，哪些是没有用的功能，哪些只是临时的解决方案。这样才可以在功能迁移时，有目的地进行调整。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>微服务</tag>
        <tag>SSH</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从SSH单体应用到微服务架构-1]]></title>
    <url>%2F2017%2F09%2F25%2F%E4%BB%8ESSH%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-1%2F</url>
    <content type="text"><![CDATA[公司将支付业务从原来所在部门剥离出来，成为一个独立的团队，以应付迅速发展的业务需求。原团队负责支付系统开发的几位同学转到现团队，形成开发班底。此后开始招聘，三个月团队扩充到10多个人。与此同时，公司业务也在快速发展，6月份宣布会员突破2千万。一些热片上映往往也会引发会员注册缴费的小高峰。其他业务，包括直播，阅读，动漫等，也都进入了发展的快车道。每天订单量早已经超过百万，比去年某片上映时把系统打垮时还早高。移动端每个月发布一个版本，桌面则是半个月。产品经理们夜以继日地规划各种功能，待开发功能都排到好几个月之后。而随着项目团队的日益扩大，却出现一些奇怪的事情： &nbsp;&nbsp;&nbsp;&nbsp;1. 开发效率和以前没有太大区别，尽管队伍扩大了4倍多，人员素质则有所提升。 &nbsp;&nbsp;&nbsp;&nbsp;2. 大部分开发工作还是几位老员工在忙，新员工还比较难介入核心开发工作。 除了管理因素，作为工程师，我们还是期待从技术上找到根源所在，解决问题，提高效率。最终的决策，是使用微服务架构来重构现有系统。这一系列博文，描述在这过程中我们做的选择、取得的成果、走过的弯路，以及经验教训。 原有架构从技术角度看，原有系统是一个基于SSH架构的传统实现，软件架构整体上是大家所熟知的多层Java软件架构：代码让人看的非常怀旧，虽然开发人员和我说是4年前开发的，但这熟悉的SSH架构，可是妥妥10年前的东西。使用Apache Struts做展示层，对数据访问层做个简单封装实现业务逻辑层，基于Spring 的AOP以及Hibernate实现数据访问。 数据保存在MySQL中，单库多表的结构。 架构问题DAO层 使用Hibernate来封装数据库访问操作。其优势是在面向对象领域，通过系统自动生成数据库访问语句的方式，使得开发者无需考虑数据库的实现细节，专注于对象的设计和使用，简化了开发工作。另外，使用Hibernate还支持系统可以在不同类型的对象数据库间无缝迁移。在业务对象关系复杂的管理系统开发中广泛使用。存在的问题是，它隐藏了数据库的实现细节，这导致在大数据场景下开发人员很难对数据库访问进行优化，而这却是互联网应用开发的重点。 Service层 业务逻辑层为Controller层提供具体业务的实现。但在实现上，问题还不少。如果是严格按照分层架构来实现，对业务逻辑层进行拆分，将本地调用变成远程调用，即可比较容易实现拆分。但实际中往往会碰到如下问题： &nbsp;&nbsp;&nbsp;&nbsp;1. 这个层往往并未实现单向依赖，部分业务逻辑层实现被注入了接口层的参数(request,response)，使其耦合到接口层。 &nbsp;&nbsp;&nbsp;&nbsp;2. 为了应对不断变更的需求，不少接口会使用map作为输入输出参数，此类接口在维护时无法约束其参数。 &nbsp;&nbsp;&nbsp;&nbsp;3. Service层绝大部分实现是使用工厂模式来管理数据对象。仅对工厂类建模，未对业务实体建模。这个层的实现是不完整的。 这使得对业务实体的操作需要推迟到Controller层来实现，导致Controller臃肿。 &nbsp;&nbsp;&nbsp;&nbsp;4. 当服务之间存在大量依赖关系时，开发人员往往会直接将Spring BeanFactory注入到各个服务中，或者简单封装一个FacadeService，通过这个Service可以访问到所有的业务逻辑对象。这个类的使用导致无法评估Controller层对Service业务对象的具体依赖。 Controller层 基于Apache Struts来实现， Apache Struts 漏洞频繁爆发，修复慢。当前已经很少在对外的应用中使用了。由于Service层实现上的问题，Controller层承担了部分业务逻辑实现，使其臃肿，难以测试。 功能问题从功能模块上来看，并没有区分对端的服务以及对运营管理系统的服务，仅实现了支付系统的基本功能： 实施问题可扩展性差，性能提升困难 web应用性能瓶颈基本都在数据库上。这个系统使用mysql作为数据库。三个应用对应三个数据库。没有读写分离。读写都在一个库上操作。数据量最大的表当时在5000万条数据。高峰期数据库操作的QPS在1000左右，压测结果是可以支撑2000的QPS。这个指标令我诧异。为什么能有这么好的性能？首先是，没有复杂的查询逻辑，所有查询都在一个表里操作，没有跨表事务处理，复杂的处理，分解为多个语句来执行。最复杂的一个action中，执行了将近20次数据查询。其次，也是最重要的因素，这里用的是SSD磁盘。从目前情况看，撑到年底应该是可以的，这也为我们技改争取了足够的时间。尽管这样，对mysql还是没有把握。每次运营部门搞活动，我们都玩胆战心惊地盯着，祈祷活动不要太有效果。 从应用层来看，目前读写比在10:1，接口日访问量10亿。高峰期访问量在300QPS。公司业务增长迅猛，数据量半年翻一番，访问量预估10倍增长。还有一个严峻的挑战，产品同学扬言要搞秒杀，秒杀…每秒十万的量必须支持到。这就超过MYSQL能承受的压力范围，需要把读操作切到内存数据库上，但是在SSH架构下，读写分离实现就得伤筋动骨了。另外由于Hibernate封装了对数据库的操作，不用写SQL了，精细优化也搞不定了。每次系统变慢，就得求DBA，帮看看有那些SQL被卡住了。每隔一段时间，还得请DBA导出SQL语句，研究怎么建索引。 系统臃肿，学习周期长 100多个接口，分为三个大项目。最大项目有1300多个类，其次是600多个和300多个类。SSH架构，SVN版本控制，resin作为容器，Nginx前置路由。路由这个让人欣慰，它是整个重构工作的有力支撑。纯后端的项目，为移动端app，PCWEB应用提供接口。这也使得重构工作难度大大降低。如果把前端也耦合进来，那就更酸爽了。庞大的系统规模为团队成员接手带来困难。 支付业务独立出来后，开发人员从原来的5人，在2个月内扩充到10人。与此同时，兴奋的产品同学也都跟打鸡血一样，各种想法纷纷变为产品，开发压力骤增。但是新增的同学，看着几百个类，往往一片茫然，无法下手。不知道哪些功能实现了，哪些功能是待改进的。一直到3个月后，新员工才逐步进入角色。尽管如此，还是有不少恐龙级代码，无人敢挑战。最大的一个类的规模是2000多行， 核心方法超过500行，大量重复代码， 每次调整都以失败告终。 合作成本高 随着项目组人员增加，每次新版本开发都需要多人一起合作，修改同一个项目代码。 虽然使用版本控制工具来对分支进行管理，但是不可避免的，大量的时间花费在代码冲突处理上。新增功能，增强功能，bug修复，支持各种客户端，都在一个项目上进行，需要建立不同的分支，高峰期五六个分支同时进行都是常见的。这种情况下，代码冲突的频率非常高。一个周的小版本开发，1天时间在解决冲突都是很正常的。 测试难度大 测试工作也逐步的恶化了。 &nbsp;&nbsp;&nbsp;&nbsp;1. 测试环境构建难度高。随着分支的增加，每个进入测试的分支，都需要准备独立的测试环境。环境构建成本高。 &nbsp;&nbsp;&nbsp;&nbsp;2. 刚测试完的功能，由于分支合并冲突处理，又得重新跑一遍。严重影响项目进度。 上线风险高 随着系统复杂度的增加，上线风险也越来也大。一个小功能的修改，打印一个日志，修复一个bug，都需要整体上线。一旦有一个地方修改错了，这个系统就崩溃了。上线时间长，一次上线，半个小时是必须的。 引入新技术困难 互联网公司对新技术的追求和使用显得特别饥渴，SSH框架降低开发难度和成本同时，也屏蔽了其他技术的导入。缓存机制，数据库优化，读写分离等，SSH有自己的一套逻辑体系，要调整姿势，成本相对高，技术难度也大，需要对实现底层有深入了解。 CONWAY’S LAW很长一段时间，这个系统是2-3位开发人员在维护，对外接口、运营系统，都混杂在一起实现，访问量也不算大。3个独立系统，对应3个版本库，每个人负责1-2个系统。当有新功能添加到系统中的时候，大家优先考虑的是如何对现有系统进行改进，而不会考虑是否需要建立新系统。而当公司做业务调整，人员迅速增加后，原有的合作方式，就需要变更了。这就应了所谓的康威定律： Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure. 我们需要一套新的机制来应对新形式下的系统演化的需求。 分层与共享库避免对原有系统作大规模调整，我们首先考虑的是利用原系统分层实现的特点，实现基于层的分工。在实践方面，以前负责的管理系统的开发项目，使用SSH架构的，大部分是采用基于分层的分工： &nbsp;&nbsp;&nbsp;&nbsp;1. 将业务逻辑层、数据访问层、数据表示层封装为可以独立维护的库。 &nbsp;&nbsp;&nbsp;&nbsp;2. 将接口层按照业务来拆分，将代码依赖调整为库依赖。 &nbsp;&nbsp;&nbsp;&nbsp;3. 为各个独立的库和项目建立各自的代码库。 &nbsp;&nbsp;&nbsp;&nbsp;4. 层之间通过接口来交互，基础层通过单元测试来保证质量。 这种分层的优势在于能够很好地解决学习周期的问题。每个层的技术相对独立，开发人员可以快速上手。 &nbsp;&nbsp;&nbsp;&nbsp;1. DAO层相对简单，因而对于团队中的新手，可以从这个层入手，熟悉系统架构和软件过程。 &nbsp;&nbsp;&nbsp;&nbsp;2. 业务逻辑层是整个系统的核心，由老员工来负责，对上可以协助显示层的开发，对下可以指导DAO层的新同学。 &nbsp;&nbsp;&nbsp;&nbsp;3. 显示层需要对HTML，CSS等技术要有所了解。 这种分工，适合10人以内的、一同办公的团队。团队之间是紧耦合的合作关系。对于大型项目，首先需要对项目按照业务进行切分，每个子项目分配到10人以内的团队来完成，之后对每个团队，采用分层的分工。但采用这种合作方式，存在的问题是： &nbsp;&nbsp;&nbsp;&nbsp;1. 要求有很好的系统架构设计。需要在编码启动前，将各层的接口、数据库结构确定下来。而这对轻架构的互联网应用开发来说几乎是不现实的。不少互联网公司甚至都没有架构师的角色，有架构师的公司，还有不少是形同虚设的。 &nbsp;&nbsp;&nbsp;&nbsp;2. 团队内部沟通成本高。层与层之间是紧耦合的关系，对接口的修改必须通知到所有使用方。这要求开发人员之间建立稳定的合作关系，通过约定俗成的规则，降低沟通成本。 &nbsp;&nbsp;&nbsp;&nbsp;3. 上述各种问题仍然存在。基础库的变更，都需要对线上的系统更新库之后重新上线。 微服务在开始支付项目改造之前，我们刚刚完成了公司数据仓库项目的微服务架构改进。这个项目实施详细过程，在dockone社区做了分享，详情参见这里。 我们认为调整为微服务架构可以解决上述问题。 性能问题 对于性能要求高的接口，可以通过建立数据缓存的方式进行优化。 学习周期 一个项目仅包含少数紧耦合的接口，接口的业务逻辑单一，开发人员1-2小时通读代码，即可快速上手。 合作成本 每个项目相对独立，项目之间仅通过接口来交互。确定完接口后，开发、测试、上线，都是独立进行的，从而降低了沟通成本。 版本控制 由于项目之间是接口依赖而不是代码依赖，每个项目都可以建立独立的代码库。同时项目切分的比较细，每个项目开发时，仅会有一个开发人员对其做修改。这基本就不存在代码合并工作，也避免了代码合并过程中的各种问题。实际上，基于微服务架构的开发，我们并没有采用分支策略，而是直接用主干开发。 测试难度 每个项目独立部署、独立测试。由于消除了代码分支，没有代码合并的隐患，重复测试的工作量减少了。 上线风险 每个项目独立上线，就算出现问题了，也仅影响到少数接口。 新技术 在微服务改造进行一个季度后，各种新技术被引入到系统中，开发不再局限于SSH架构。Spark, Hadoop， Hbase等大数据处理相关的技术，Couchbase, Redis等缓存系统，都开始在项目中使用，并有效地解决的业务上存在的问题。 当然，有利必有弊，微服务带来的问题，也不少，包括项目多、出问题时排查难等，在实施过程中，也积累了不少的经验。这些问题，将在后续的分享中逐步做介绍。]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>微服务</tag>
        <tag>SSH</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux干货系列：（一）、Linux介绍篇]]></title>
    <url>%2F2017%2F08%2F17%2FLinux%E4%BB%8B%E7%BB%8D%E7%AF%87%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;操作系统对于很多的非计算机专业的朋友们来说是很陌生的，在生活中常常接触到的所谓的系统也大多指的都是微软的windows，当然除了windows操作系统之外还有一款对于开发者来讲非常重要的操作系统，那就是Linux。为什么呢？因为你会发现基本上没有什么项目会部署在windows操作系统上的，生产服务器也基本上都是用的Linux。在这里我也就不再啰嗦的列举windows和linux的区别了（无非就是费用啊、开源啊、安全啊等等），总之社会很流行用，咱就去学就好了，肯定会有市场了。在这里我也就不再详细的讲解操作系统是什么了，和硬件、软件等之间的关系了等等，大伙自行百度去，嘿嘿，直奔主题———如何学习Linux？下图是一个学习架构图，取材于实验楼，归纳的特别好。 &nbsp;&nbsp;&nbsp;&nbsp;作为java开发人员，个人觉得Linux水平达到中级就差不多够用了，如果是linux方向的开发人员当然基本上都得熟咯。如果是运维人员，则Linux高级中的Linux服务器领域也必须熟，否则就不是一名合格的运维人员。当然如果您对Linux特别感兴趣的话，也可以深入的学习。]]></content>
      <categories>
        <category>Linux干货系列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年下半年学习计划]]></title>
    <url>%2F2017%2F07%2F26%2F2017%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;17年上半年是折腾的半年，不过万事开头难，初来上海必须经历这么一遭的，我亦深知：苦难,是上帝送给我们带着包装的礼物,所有的磨难,都让人成长。如若一路顺风，岂非达不到闯一闯的目的呢。 &nbsp;&nbsp;&nbsp;&nbsp;现在这家公司的性质有点类似于国企，所有的项目并不是完全由我们这些开发人员去做，都是进行招标由厂商来做，我们负责梳理需求和辅助开发，等到厂商退场之后完全的接手整个项目。目前公司准备在集团层面做一个金融平台把所有子公司系统公用的功能提取出来，比如：风控、账户（会员）、支付（渠道）、入口、运营等，现阶段还在招标过程中。那么趁着这段时间整理下思路，捋清楚自己的职业规划，抓紧时间站稳脚步，为下一次的起跳蓄力。 序号 时间段 项目 备注 1 07：00~07：50 起床 - 2 07：50~08：30 早饭和上班路上 - 3 08：30~17：30 上班 - 4 17：30~18：00 晚饭 - 5 18：00~21：00 加班学习 学习方向：技术(java、大数据等)、语言（英语、日语） 6 21：00~21：30 跑步回家 - 7 21：30~22：00 洗衣服 - 8 22：00~22：30 洗澡 - 9 22：30~23：00 睡前读书 非技术和语言类 在不影响生活和工作的前提下，2017年下半年学习计划： javaSE和javaEE部分的总结全部以博客的形式完成。 大数据方向的知识同样以博客的形式完成学习。 Linux操作系统的基本操作和使用，以ubuntu为准。 数据库方向以mysql和oracle为准。 缓存数据库方向以redis和mongodb为准。 学习梳理支付、风控、账户等金融领域的业务知识，以博客的形式完成。 英语水平：词汇2000，经典文章10篇，熟练听、说、写。 日语水平达到N5标准。]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年上半年总结]]></title>
    <url>%2F2017%2F07%2F26%2F2017%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;不觉间2017年已经过去了一半，年初的时候记得是3月10号从天好离开来到上海，那时意气风发，铆足了劲儿想成就一番事业，当然也是鼓足了勇气。从15年毕业到17年，老妈一直不同意我离开苏州，哪怕是之前北京的项目要出差，她也觉得如果非要去北京的话，就向公司提出离职。当然最后她还是妥协了。老妈的一片苦心我何尝不明白，无非是担心我在偌大的帝都难以生存，担心我生活的不好，因为至少在苏州在她身边，她能给予我无微不至的照顾，可怜天下父母心。果不其然，当我告知老妈和老爸我准备辞去工作去上海的时候，老妈那强烈的反对声音差点没让我打消这个念头，值得庆辛的是老爸说了一句“是应该出去闯闯的。”后来，老妈没能经得住我和老爸的统一战线作战，再一次妥协了。 &nbsp;&nbsp;&nbsp;&nbsp;来到上海之后，感觉上海和苏州没什么区别，唯一的区别就是人要比苏州多。初来上海寄居在大学同宿舍的兄弟那，便开始投简历了。裸辞的感觉还是蛮心酸的，心里一点底都没有，不是不知道裸辞不好，实在是因为换城市，就算是在职换工作也没能抽空到上海来面试。所以开始也面试了很多外包公司，就当试试水啦，当然中间也有非外包的公司。大概不到三天，就有一家公司给我发来了offer，意思是项目比较急想让我尽快的来上班，薪水福利都按照我说的来，再一问工作的性质是项目外包而且是银行项目，由于不太了解这个项目外包的具体情况，而且告知我说是本公司的团队一起在银行做项目，之前在天好的时候出差也是属一个团队去甲方开发的，所以误认为和之前的工作性质和模式是一样的，再加上裸辞的心里压力以及薪资条件还可观，就答应了下来，后面的面试也就没再去了（主要是我同学住在佘山，每天去浦东面试地铁都要坐一个多小时，太累了）。接下来就顺顺利利的办了入职。 &nbsp;&nbsp;&nbsp;&nbsp;入职当天就被人事带到项目现场（浦发银行-莲花路上的），做的是一个基于大数据的运维管理平台项目（当初心动的原因也有一部分听说是大数据的项目），在接下来的时间里也终于搞懂了这一切都是些什么套路。公司是和浦发银行以卖人头的形式和银行签订合同，而且这个所谓的“大数据项目”并不全算是一个大数据项目，因为有大数据团队把数据处理好了丢给我们，我们再针对这些数据，按照银行客户的需求来筛选出来，以报表、table、pdf等形式展示出效果来，当然中间取那些数据是用到了ElasticSearch 检索技术和类似于easyUI的kafka报表，这也算是和大数据沾了点边。在做项目的过程中，没有项目经理，没有测试，没有UI，没有运维，从需求、前端、后端、测试、上线都是自己负责，后来才知道这个项目还没开始启动，而且我们也不是开发这个项目的主力，这个项目会进行招标由厂商来做，我们现在做的说明白一点就是小白鼠，梳理需求的过程，行方想到一点需求，就让我们开发一点，看看效果。银行老师为了在他们领导面前展示他们为这个项目的努力，除了自己每天加班到九点之外，也要求我们每天陪同他们一起加班。于是乎就开始了漫长的加班生活。自己也感觉是应该好好的努力一把了，于是乎就在漕河泾找了房子，虽然有点贵但是离上班近啊，方便加班。 &nbsp;&nbsp;&nbsp;&nbsp;连续奋战两个月了，同事们对我很认可，银行的老师也对我的能力表示认可。眼瞅着也马上要转正了，有一天银行老师突然找上我们团队，其实加上我也就三个人，大致的意思是，公司和银行签订的合同马上要到期了，好像是公司对这个项目也没能招到标，所以问问我们想不想继续跟着他干，如果想就推荐我们进别的公司，再进这个项目，后来本着对公司忠诚的态度，我们都未发表任何意见。中间另一家和我们一起开发这个项目的开发人员也私底下让我们准备简历，去他家公司，均给予不理会。到5月底的时候，依稀记得好像是周五，下午的时候接到公司电话说让我回趟公司，有些事情想和我谈谈，当时就感觉不太妙啊，因为第二天就要转正了，可怕公司因为项目的事卡我。当天下午银行老师也来找我谈了下，表示说因为公司和银行合同到期等原因，暂时让我先公司，听公司的安排。等我回到公司的时候，人事就过来和我谈，说要么更换部门（需重新面试，重新试用，工资下调），要么终止合同。我当时那个气呀，实在没想到公司居然能做出这等过河拆桥的事情，辛辛苦苦为公司在项目现场加班加点两个月，中间别家公司挖人都没理会，眼瞅第二天转正了，就因为和我半毛钱关系都没有的合同到期（其实主要原因是没中标，所以人员没法安置）就想终止合同，忽视我这两个月的劳动成果，再一回想当初新人培训时那讲师嘴里的公司和所谓的价值观，更是气不打一处来。但心里一想这个社会本来就是这个样子，虚情假意，唯利是图。于是就尽可能的和公司谈补偿。最终谈妥的方案是第二天的转正正常转，并且带薪休完之前所有的加班，而我也必须签订假期休完之后主动提出离职的协议。 &nbsp;&nbsp;&nbsp;&nbsp;在休假的期间我又开始陆续的投简历面试，之前这个大数据项目和银行开发的经历让我的资本也丰富了不少，还没怎么开始投简历，只是更新了下简历电话就开始嘟嘟嘟的响个不停，而且还是处于毕业季，不禁又让我感受到上海的强大了。有了之前的经历，我在找工作的过程中，只找甲方公司，其他的乙方啊、外包啊，不管是项目外包还是人员外包啊，都直接pass。非常顺利，也是不到三天的时间里，收到了现在这家公司的offer，当然中间还有一家公司招项目主管的，初试过了等着复试，所以当时没立即答应现在这家公司，等复试完那家公司后，让等通知说会从我们几个复试中选一个，在此之间我还是果断的选择了现在这家公司，因为这家公司是做互联网金融的，而且公司的背景很大，公司的性质和国企差不多（五险两金）。果然那家复试的公司也没了音信。 &nbsp;&nbsp;&nbsp;&nbsp;半年的时候就这么眨巴眼睛之间过去了，回过头去看不禁感慨万分。从来上海寄居在同学家（佘山），接着在浦东、徐汇等地面试，最远跑到唐镇，再到漕河泾的浦发银行上班，接着从同学家搬离住在万源新城（中间未通过中介自己找房子两个周末），又从公司离职开始面试，再到现在这家公司（陆家嘴世纪金融广场）上班，又搬家搬到临沂新村（让中介帮忙找的，自己最远找到了外高桥）。和之前的苏州生活相比虽然折腾了些，但是我觉得在这半年里我学到了很多的东西，这一趟上海是来对了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;年轻就要经得起折腾！]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[真心，懂得，陪伴]]></title>
    <url>%2F2017%2F07%2F24%2F%E7%9C%9F%E5%BF%83%EF%BC%8C%E6%87%82%E5%BE%97%EF%BC%8C%E9%99%AA%E4%BC%B4%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;记得大学一年级的时候，第一次在室友的蛊惑下说出“我想念你”这四个字。电话那头突然安静下来，沉默，然后用我听过的最温柔的声音说“那不打牌了，我陪你吧”。这好像是我关于他的唯一最好的记忆。当你违背本性用爱情国度的语言言不由衷地交流，却发现只有这种形式大于内容的交流才能带来真诚的回应时，这真是莫大的讽刺。 &nbsp;&nbsp;&nbsp;&nbsp;所以我好久没说过这样的话了，觉得假得很。 &nbsp;&nbsp;&nbsp;&nbsp;不得不承认，我是一个非常没有情调的人，不仅我自己没有情调，而且我极端反感别人跟我玩情调。 &nbsp;&nbsp;&nbsp;&nbsp;若一个人以为一束花一盏烛光或是一件礼物就能让你欢喜雀跃，那么他太过看轻你。若一个人以为众目睽睽之下诸如“单膝跪地”式的义无反顾才能证明他的爱情，那么他太过看轻自己。若不能细水长流地书写内心的温柔，那轰轰烈烈的一幕一幕不过是日后回忆自己爱无能的证据罢了。当然也会有人悲催但真诚地对你说“为什么我做的所有我认为感动的事情，你都没有感动”，我想，这可能就是两个不同振幅的人企图改变自己灵魂的节奏来延续爱情了，其结果也只能是一败涂地。 &nbsp;&nbsp;&nbsp;&nbsp;就像最近火了的那歌唱的，其实野马就是野马，你搬去呼伦贝尔，他也永远不会向往你家里的草原。 &nbsp;&nbsp;&nbsp;&nbsp;但是，我反感情调不代表我反感浪漫。玩情调跟玩浪漫完全是走火入魔急于求成的周芷若和人淡如菊却出神入化的黄衣姐姐的区别。 &nbsp;&nbsp;&nbsp;&nbsp;什么叫浪漫 —— 一年陪你过十二个情人节的总有一天会因为你的公主病掉头离开，整天短信电话腻腻歪歪到极致的总有一天穷死在中国移动的面前，为你淋雨打架卖血自残各种犯贱的你还指望他结了婚能对你怎样，把你当成全世界的有了你家也不回了妈也不管了工作也扔下了dota也不打了，我只能说他心胸太小小到只够装得下你，你俩以后就指着一颗玻璃心过日子吧。 &nbsp;&nbsp;&nbsp;&nbsp;其实，什么叫浪漫——直言不讳地说我很喜欢你但请你不要把这当成一种姿态，这就叫浪漫。你喜欢的正确的一切他都有要了解和体验的冲动，并及时告诉你不要沉迷于此不可自拔，这就叫浪漫。对生活有自己的热情和愤怒，对未知的事物充满好奇，独立自由且重情重义，这就叫浪漫。指着自己爹妈对你说，咱以后一起孝敬他们，这就叫浪漫。 &nbsp;&nbsp;&nbsp;&nbsp;在我上幼儿园的时候，放学家里没人，院里一个叔叔就坐在楼下的草坪上讲故事给我听，一直到爸爸妈妈下班他才去食堂吃饭。这个画面我已经忘了，但是我妈还记得，她说那么粗线条那么虎背熊腰的一个大小伙子就这样陪着一个小屁孩儿，真是难得。跟大人在一起像大人，跟孩子在一起像孩子，跟狗在一起像狗的人，不难得才怪。 &nbsp;&nbsp;&nbsp;&nbsp;我妈说：看一个男生怎样，不要看他对你怎样，去看他对别人怎样。一个能对所有人都抱着一颗友善之心的人，他永远都不会舍得伤害你。故伪愤青不可碰，真情种不可碰，话多又没重点不装逼就会死的傻X也不可碰。 &nbsp;&nbsp;&nbsp;&nbsp;一个女生，十五岁的时候相信童话故事，说明你纯真；二十五岁的时候依旧分不清童话和现实，那就是你幼稚。 &nbsp;&nbsp;&nbsp;&nbsp;就像一个男生，十五岁的时候说自己为理想和爱情而生，我会觉得那是万恶的高考制度下难得一见的独创性思维；但是二十五岁的时候再整天为“爱情”撕心裂肺、为“理想”奋不顾身、虽视金钱如粪土结婚时依旧让爸妈掏钱买这买那、虽张口闭口决不妥协但遇到与自身利益相关的问题时便束手无策火大冲天，那你即使有再多的money，也不过是个潜力DS股而已。 &nbsp;&nbsp;&nbsp;&nbsp;时间从来不喧哗。若光阴飞逝，你却依旧不能沿着正确的方向沉淀自己的心，那你的灵魂将空无一物，还期待什么浪漫的共振，只能期待那些矫情无比的小情调为你从未开始过的青春留下些许苍白的证明罢了。 &nbsp;&nbsp;&nbsp;&nbsp;让自己变得强大不只是说说而已，十几岁的小萝莉们也开始宣扬要成为一个内心强大冷暖自知的女汉子了。拎个水果都嫌重的姑娘，你凭什么说自己是女汉子，在职场上呼风唤雨的姑娘，对家务事一窍不通，你凭什么说自己内心强大。真正聪明的姑娘，一定是福慧双修的，这跟你会几种乐器操几门外语拿几W月薪飞几个国家一毛钱关系都没有。你除了要有让自己的双脚坚实地站在大地上的东西，还要用最柔韧的心勇敢迎接各种挑战，琐碎至柴米油盐，精细至婆媳关系，高端至业务洽谈职场纵横等等等等。 &nbsp;&nbsp;&nbsp;&nbsp;温柔但心有所属，随和却立场坚定，不浮夸不骄躁，看上去永远是一柄柔柔弱弱的剑，斜斜刺出，才能杀人于无形。 &nbsp;&nbsp;&nbsp;&nbsp;廖一梅说，我挺着脖子支撑了那么多年，最终希冀的竟然也不过是被宠爱，被恰如其分地宠爱。 &nbsp;&nbsp;&nbsp;&nbsp;其实养过小猫小狗的人都知道，宠爱谁都会。可惜越来越多的人把宠爱放大成溺爱，然后各种负能量各种予取予求。恰如其分地宠爱一个人，同时她能感受到并感激你的这份恰如其分的清醒，这才是关键。很多事情，过了那个度，没有了“你之所以是你”的原则，便没有了“爱情之所以是爱情”的意义。 &nbsp;&nbsp;&nbsp;&nbsp;所以，若两个人从根本上是异类，那再多的浪漫在对方的眼里都是莫名其妙的动作。试问宝玉的旧帕子宝钗怎么能明白呢，杨过的苦痛郭芙怎么能了解呢，林朝英对王重阳的百般刁难丘处机怎么能想通呢，任盈盈那么喜欢令狐冲却不肯让他入教掌权她老子任我行怎么会不纳闷呢？ &nbsp;&nbsp;&nbsp;&nbsp;执子之手与子偕老，光有情有个屁用，关键是懂得。既然有生之年狭路相逢终不能幸免，那么，情之所至处我所做的一切加你所做的一切，身不由己后我没能做的一切加你没能做的一切，就是浪漫。 &nbsp;&nbsp;&nbsp;&nbsp;张爱玲不是寄了所有的积蓄给放弃她的胡兰成吗，徐志摩不是以生命为代价飞去林徽因那儿吗，许广平不是答应鲁迅为了朱安愿意不结婚只相伴到老吗，胡蝶不是在戴笠的数年软禁之下依旧忍辱负重地活着吗？ &nbsp;&nbsp;&nbsp;&nbsp;这么多年过去了，还是有很多人对他们评头论足指指点点。可是，在彼此的心里，只要你以你独有的姿态，以我爱上你的姿态，以你从未改变过的喜悦自由的生命姿态，存在在这个世界上，在我看来，这就叫浪漫。 &nbsp;&nbsp;&nbsp;&nbsp;对于那个《小时代》，我唯一认同的话就是，如果一个人说喜欢你，请等到他对你百般照顾时再相信；如果他答应带你去的地方，等他订好机票再开心；如果他说要娶你，等他买好钻戒跪在你面前再感动；感情不是说说而已，我们已经过了耳听爱情的年纪。 &nbsp;&nbsp;&nbsp;&nbsp;我们早过了学生时代诗酒年华，既不会再抱着本朦胧诗独自吟唱“我如果爱你，绝不像攀援的凌霄花借你的高枝炫耀自己”，也不希望老了的时候才发现“曾有一人爱我那朝圣者的灵魂，爱我衰老了的脸上痛苦的皱纹”，所以只有浪漫是远远不够的。但是我们还年轻，虽然经历过伤痛，却在内心深处依然保留一份倔强，以至于我们要的计划并不是钱、钻石和社会地位，而是努力、沟通和理解。 &nbsp;&nbsp;&nbsp;&nbsp;坐在你自行车后座的姑娘离开了，并不一定是为了坐在宝马里笑，她完全可以骑着另一辆自行车，和你一起创造你们的浪漫，只要你给她一份建立在奋斗、沟通和理解之上的计划愿景。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;愿有情人相知在心，不负斯土。]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>情感随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搜索插件]]></title>
    <url>%2F2017%2F07%2F18%2Fhexo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[不同的主题对应的搜索插件配置不太一样，因为不同的主题js方法不太一样，小编在此总结的是yelee主题下支持的插件配置方法。 在hexo的根目录下安装两个插件：npm install hexo-generator-search --save npm install hexo-generator-searchdb –save 会在D:\tools\hexo\node_modules目录下生成两个文件夹hexo-generator-search和hexo-generator-searchdb. 在当前主题下D:\tools\hexo\themes\yelee_config.xml里 本地测试结果： 除了搜素插件之外，hexo还支持很多其他的插件配置，比如：评论、分享等等。详细请参照http://moxfive.coding.me/yelee/1.Getting-Started/installation.html]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo更换主题+发表文章格式]]></title>
    <url>%2F2017%2F07%2F17%2Fhexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%2B%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[人靠衣装马靠鞍，hexo一样。hexo官网除了提供各种版本的维护之外，同时向用户提供了大量不同风格的主题，以jacman为例总结更换主题的操作。 下载主题直接Git Bash命令行中输入命令：$ git clone https://github.com/wuchong/jacman.git themes/jacman（会再D:\tools\hexo\themes文件夹下生成一个jacman的文件夹） 修改配置文件修改根目录下的_config.xml修改hexo文件夹下_config.yml（根目录下的），内容如下（有注释，用Sublime Text(使用它的原因是默认是UTF-8编码，中文不会乱码)打开_config.yml文件，否则会乱码的）注：在每个参数的”：”后都要加一个空格修改网站相关信息; # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site 网站 title: 小福星独立博客 #网站标题 subtitle: 既无三徙教，不闻过庭语 #网站副标题 description: hello,every body!~ #网站描述 author: sonny #您的名字 language: zh-CN #网站使用的语言 timezone: #网站时区。Hexo 默认使用您电脑的时区 # URL 网址 ## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 url: http://hushen8023.github.io root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory 目录配置 source_dir: source #源文件夹，这个文件夹用来存放内容。 public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。 tag_dir: tags#标签文件夹 archive_dir: archives #归档文件夹 category_dir: categories #分类文件夹 code_dir: downloads/code #nclude code 文件夹 i18n_dir: :lang#国际化（i18n）文件夹 skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 # Writing 文章 new_post_name: :title.md # 新建文章默认文件名 default_layout: post # 默认布局 titlecase: false # Transform title into titlecase external_link: true # 在新标签中打开一个外部链接，默认为true filename_case: 0#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。 render_drafts: false #是否渲染_drafts目录下的文章，默认为false post_asset_folder: false #启动 Asset 文件夹 relative_link: false #把链接改为与根目录的相对位址，默认false future: true#显示未来的文章，默认false highlight: #代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag 分类和标签的设置 default_category: uncategorized #默认分类 category_map: #分类别名 tag_map:#标签别名 # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination 分页 ## Set per_page to 0 to disable pagination per_page: 10 #每页显示的文章量 (0 = 关闭分页功能) pagination_dir: page #分页目录 # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: jacman # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: https://github.com/hushen8023/hushen8023.github.com.git branch: master 修改主题目录下的_config.xml修改新的主题jacman下的_config.yml(对应主题下的_config.xml) ##### 菜单 menu: 主页 | Home: / 归档 | Archives: /archives 简介 | About: /about ## you can create `tags` and `categories` folders in `../source`. ## And create a `index.md` file in each of them. ## set `front-matter`as ## layout: tags (or categories) ## title: tags (or categories) ## --- #### 右边显示部分，按着排序进行排序，我用到了分类，标签，友情链接，微博，rss widgets: - category - tag - links - weibo - rss #返回顶部按钮，totop。在博客右下脚显示一件返回顶部按钮 totop: true ## if you want to scroll to top in every post set the value to true #### RSS 地址 rss: /atom.xml ## RSS address. #### Image 图片。包括各种图片，可以在jacman主题下source下img文件下找到各种图片，想要换成你的直接换就ok，当然名字扩展名最好用一样的 imglogo: enable: true ## display image logo true/false. src: img/logo.png## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`. favicon: img/favicon.ico ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`. apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`. author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this. banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture ### Theme Color theme_color: theme: &apos;#2ca6cb&apos;##the defaut theme color is blue # 代码高亮主题 # available: default | night highlight_theme: default ####首页文章是否展开。默认为展开式，显示 Read More。 index: expand: true ## default is unexpanding,so you can only see the short description of each post. excerpt_link: Read More ###是否在文章页面自动关闭侧边栏 close_aside: false #close sidebar in post page if true mathjax: false #enable mathjax if true ### Creative Commons License Support, see http://creativecommons.org/ ### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero creative_commons: none #### 作者信息，显示在网站底部。主要包括，文字介绍，以及图片。还有各种你的链接包括微博等等。换成你id就行； author: intro_line1: &quot;Hello ,I&apos;m onePeace Page in csdn.&quot;## your introduction on the bottom of the page intro_line2: &quot; Stay hungary,stay foolish.&quot; ## the 2nd line weibo: 2026326475 ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895 weibo_verifier: 039d33aa ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed. tsina: 2026326475 ## e.g. 2176287895 Your weibo ID,It will be used in share button. douban: ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014 zhihu: wang-he-ping-78 ## e.g. jark for http://www.zhihu.com/people/jark email: w_peace12@163.com ## e.g. imjark@gmail.com twitter: wpeace1212 ## e.g. jarkwu for https://twitter.com/jarkwu github: wpeace1212## e.g. wuchong for https://github.com/wuchong facebook: 100006871362068 ## e.g. imjark for https://facebook.com/100006871362068 linkedin: wpeace1212 ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014 google_plus: wpeace1212 ## e.g. &quot;111190881341800841449&quot; for https://plus.google.com/u/0/111190881341800841449, the &quot;&quot; is needed! stackoverflow: ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark ## if you set them, the corresponding share button will show on the footer #### 目录，是否在文章中显示目录。显示在侧边栏； toc: article: true ## show contents in article. aside: true ## show contents in aside. ## you can set both of the value to true of neither of them. ## if you don&apos;t want display contents in a specified post,you can modify `front-matter` and add `toc: false`. #### 友情链接 links: 开发者头条: http://toutiao.io/ peace in csdn: http://blog.csdn.net/peace1213 博客园： http://www.cnblogs.com/onepeace/ #### 评论 国内用多说很好。注册账号，写在这里就ok duoshuo_shortname: rlovep ## e.g. wuchong your duoshuo short name. disqus_shortname: ## e.g. wuchong your disqus short name. #### 主题自带分享，这里用了false jiathis: enable: false ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display. id:## e.g. 1889330 your jiathis ID. tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button. ####网站统计，我用的时cnzz统计 google_analytics: enable: false id:## google analytics ID. site: ## 网站地址. ## You MUST upgrade to Universal Analytics first! ## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN baidu_tongji: enable: false sitecode: 140e36c412afe791813036c83f602b ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code cnzz_tongji: enable: true siteid: 1255712369 ## e.g. 1253575964 your cnzz tongji site id #### Miscellaneous ShowCustomFont: true ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`. fancybox: true## if you use gallery post or want use fancybox please set the value to true. #### 自定义搜索，我用的时百度搜索 google_cse: enable: false cx: ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID. ## https://www.google.com/cse/ ## To enable the custom search You must create a &quot;search&quot; folder in &apos;/source&apos; and a &quot;index.md&quot; file ## set the &apos;front-matter&apos; as ## layout: search ## title: search ## --- baidu_search: ## http://zn.baidu.com/ enable: true id: 16217304412639601221 ## e.g. &quot;783281470518440642&quot; for your baidu search id site: http://zhannei.baidu.com/cse/search ## your can change to your site instead of the default site tinysou_search: ## http://tinysou.com/ enable: false id: ## e.g. &quot;4ac092ad8d749fdc6293&quot; for your tiny search id 文章格式title: #标题 date: 2017-07-17 10:20:18 #文章生成時間 categories: &quot;&quot; #文章分類目錄 可以省略 tags: [,] #标签，多个标签以数组形式 description: &quot;&quot; #文章描述，用于列表展示 --- &lt;Contents&gt; #开始正文... 参考文档https://hexo.io/themes/ http://blog.csdn.net/peace1213/article/details/47010381]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对不起，我爱你]]></title>
    <url>%2F2017%2F07%2F15%2F%E5%AF%B9%E4%B8%8D%E8%B5%B7%EF%BC%8C%E6%88%91%E7%88%B1%E4%BD%A0%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;思来想去，或许我只适合用文字的形式来和你说一些东西，讲一些心里话，这样你才能静下心来聆听，我们也不需要你一言我一句的，声音越来越大，火气越来越大，说的话也越来越难听了。 &nbsp;&nbsp;&nbsp;&nbsp;在此时此刻你或许对我不满，对目前的现状感到失望，对当初的选择感到后悔，但是我却不然，至少我没有对你不满，对目前不失望，对当初的选择也不后悔，如果我也不满，也失望，也后悔，我想我们真的是走不下去了。在这段感情中我一直都是很乐观的，当然我的人生态度也一直都是很乐观的。从你我相识到今天有五个月零两天了，很感激你的喜欢，你的认可，你的奋不顾身，抛弃深圳的生活、事业和朋友毅然决然的来上海，可是呢，在这个陌生的城市，你并没有的因为爱情和我而过的比之前好，甚至更糟糕，每天上班幸苦，挤地铁幸苦，回家了那么小的房子，还要烧饭，还有着这么位幼稚不成熟的我时不时的惹你不开心，婊子嘴，整天嘟嘟嘟。在这里我向你真诚的道歉，我对不起你，我没有好好的照顾你，没能尽到一位男朋友、未婚夫的职责，没能照顾你的小情绪，没能给予你舒适的生活。请相信我，我并非扶不起的刘阿斗，面包会有的，牛奶也会有的，一切都会好的。 &nbsp;&nbsp;&nbsp;&nbsp;两个人在相处的过程中，不管之前的印象有多好，真正的相处久了彼此身上的小问题都会显露出来，比如我：好争辩，一堆歪理、婊子嘴，总是爱叨叨叨、懒惰，这些之前的时候我都不怎么发现，目前来看我真的存在这些坏坯子，我也承认，我愿意改变，不仅仅是为了你，更多的是为了我自己，我也无时无刻都在想变的更好。可是呢，有的时候出现问题了你也只会埋怨我的不是，吵架了你只会记起之前我对你的各种不好，而忽视我爱你的时候，忽视我真情的时候，你只会一味的在按照你自己的性子，批判我，审视我，然后看着别人的爱情，指着我说，看别人的老公怎样怎样，再看看你，正如你说的一样，细节细节，我的细节是把你气跑，把你往外推，可真的全都是这样子吗？你生气的时候也仅仅记得那天晚上我嫌弃你热不去抱你，可曾去了解过那天晚上我浑身是汗，难道不能等到我凉会儿后再去抱你吗；仅仅记得昨天你腰疼，我回家没有问你一句，没有关心过你一句，可曾记得我在地铁站见到你的第一句话就是问你腰还疼吗；仅仅记得我在全神贯注发布房子信息的时候，你和我说话，我没搭理你然后对你吼，可曾知道因为你说我说的难听，好像我在玩别的不搭理你一样，我也曾解释我全神贯注的时候容易听不到别人说什么等等，其实两个人在相处的时候难免会有意见不合的时候，会有争吵的时候，就比如上次你姐和你姐夫的事，我们为此还争吵过，也难免会有工作，家庭其他事情的不如意心里不舒服的时候，在说话的时候情绪化，比如我上份工作，我苏州社保，你的考试，你生理期等。这些时候就需要我们彼此去包容，去理解，去沟通，照顾好彼此的小情绪。当然自己也不能太过了，尽可能的不去伤害到对方。 &nbsp;&nbsp;&nbsp;&nbsp;爱是相互的，你向往爱情，我又何尝不向往呢。书本和影视剧里的爱情总是那么的美好，可现实中的爱情呢，毕竟是要过日子的嘛。在这段日子里，我感觉到我进步了很多，这些都是你的功劳，说句心里话，我还是蛮怕你的，愿意去听你的意见。因为你毕竟学历比我高，见识比我广，懂得的人情世故比我多。在你的陪伴下，我也越来越上进，压力也越来越大，不想让你跟我在一起受委屈，所以我想最近换房子，哪怕贵一点也无所谓，实在是不想让你你挤地铁，住又小又臭的房子了。我也想考研究生，或许难度很大，但是我不想一直拖你后腿，说出去你老公是个三本。我也想变的更好，越来越贴近书本里、影视剧里的男主角，阳光、大度、贴心、温柔，有本事，让你拥有完美爱情。 &nbsp;&nbsp;&nbsp;&nbsp;从一出生父母就开始为我们操心，操不完的心。叔叔阿姨担心我对你不好，担心你受委屈，我爸妈也担心我们闹矛盾，吵架。在他们的心中，一直以来只希望我们好好的，过的越好他们越开心，不求我们有多么大的本事，也不求我们能怎样怎样的孝顺他们，也仅仅希望我们过的幸福。我是个孝顺的人，以前是，现在是，将来也是，当然你也是的，我们不能让他们失望，我们应该感激他们，爱他们。 &nbsp;&nbsp;&nbsp;&nbsp;坐在自行车后座的你离开了，并不一定是为了坐在宝马里笑，我想你完全可以骑着另一辆自行车，和我一起创造我们的浪漫，只要我们拥有一份建立在奋斗、沟通和理解之上的计划愿景。]]></content>
      <categories>
        <category>生活感悟</category>
      </categories>
      <tags>
        <tag>情感随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github搭建个人博客]]></title>
    <url>%2F2017%2F07%2F13%2Fhexo%2Bgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[利用hexo、gitbub、node.js以及git客户端搭建个人博客，在此总结记录一下，方便以后用到。 环境部署:安装node.js 下载地址：https://nodejs.org/en/ 安装git客户端下载地址：https://git-scm.com/download 安装方式都是默认，建议安装的目录都是采用英文的全路径。 安装hexo 在任意位置右击鼠标选择Git Bash Here进入命令行，输入hexo的安装命令：npm install -g hexo 在D:\tools下新建hexo文件夹，进入hexo文件夹，右击鼠标选择Git Bash Here进入命令行，输入hexo初始化命令：hexo init；安装依赖包：npm install；（会在当前hexo文件夹内生成很多hexo的配置文件和配置文件夹） 继续输入命令：hexo g（hexo g #完整命令为hexo generate,用于生成静态文件） 继续输入命令：hexo s （hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览） 本地已经搭建好了一个基于hexo的博客，根据提示输入http://localhost:4000即可访问，可能会出现一直加载问题，请看底端遇见的问题解决。终止是用ctrl+c命令。 以上是本地部署的，只有本地才能访问，如何才能在互联网上访问呢，需要把hexo发不到GitHub上去。首先必须得有GitHub账号，这里就不展示GitHub的注册了，默认已有GitHub的账号。 创建repository 上图是因为我已经创建了一个hushen8023.github.io的项目，所以报错的。 编辑hexo文件夹下的_config.yml文件，参照下图 如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:在Git Bash输入以下指令（任意位置点击鼠标右键：ls -al ~/.ssh），检查是否已经存在了SSH keys。 如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件： 在Git Bash命令行中继续输入指令：ssh-keygen -t rsa -C &quot;szys_hs@126.com&quot;(注意：后面部分为你GitHub的邮箱，而且出现提示让你输入的时候直接先回车，好像需要3次) 继续命令行：ssh-agent -s 继续命令行：ssh-add ~/.ssh/id_rsa（输入之后，我这边出错了，不知道你出错没） 如果出错了，请输入以下指令：eval ssh-agent -s ssh-add 操作到这一步，基本上是完成了，接下来就是添加SSH key到GitHub账户中去，输入指令：clip &lt; ~/.ssh/id_rsa.pub（注意，输入完指令之后，表示已经拷贝，直接可以ctrl + v粘贴即可），在setting中的这个SSH keys的title随便取 测试：输入指令：ssh -T git@github.com 以上就表示SSH配置好了，执行以下命令部署到Github上。 执行指令：hexo g(hexo g #完整命令为hexo generate,用于生成静态文件) 执行指令：hexo d(hexo d #完整命令为hexo deploy,用于将本地文件发布到github上) 安装指令：npm install hexo-deployer-git –save 安装完成之后，继续执行hexo d 访问连接，比如我的hushen8023.github.io 发表文章: 在Git Bash下输入命令：hexo new “my new post”(会在hexo文件夹下比如我：D:\tools\hexo\source_posts文件夹下生成一个my-new-post.md文件）； 编辑这个新生成的文件，推荐使用Markdownpad工具编辑； 写完文章后，你可以使用 $ hexo g生成静态文件。 $ hexo s在本地预览效果。 $ hexo d同步到github 遇见的问题： 安装完node.js、git和hexo完，输入http://localhost:4000一直在加载，就是出不来hexo的页面，在网上查阅了很多资料，显示4000的端口可能被占用，可以修改端口：hexo server -p 8888然后就成功了。 把本地hexo部署到github上去访问时出现问题，一直404；如下图 解决方案： 在github上新建Repositories的时候，Repository name的值必须是github的账号名.github.io的格式，比如我：hushen8023.github.io 拷贝完密钥到github之后，需要在邮件中确认重新登陆的。 检查在github中生成的hexo的目录结构是否完整 如果还未解决，等上10分钟左右，一般需要解析下。访问：http://hushen8023.github.io/即可 3.中间更换过一次电脑，所以环境什么的都得重新安装，幸亏hexo文件夹可以直接拷贝过来，不然的话里面很多的配置和文章都得重新整。在安装完之后还需要重新的把本地的git和github联系起来，需要按照这个文档走一遍,把ssh文件和github上的sshkeys绑定。中间就碰到这个问题，问题的原因是本地的git没有设置用户配置。 分别用 这两条命令： $ git config --global user.name &quot;name&quot; $ git config --global user.email your_mail@gmail.com hexo指令总结 hexo c #hexo clean 清除缓存 hexo s #启动本地服务 hexo g #生成静态文件 hexo d #部署到GitHub上去 hexo server - p 8888 #更改端口，本地测试 hexo n “新文章” #hexo new “新文章” hexo new page tags#创建一个标签云 hexo new page about#创建关于我 参考文献http://moxfive.coding.me/yelee/ http://tengj.top/2016/02/22/hexo1/ http://blog.csdn.net/imail2016/article/details/51762873 http://www.voidking.com/2016/05/13/deve-gitcafe-to-coding/]]></content>
      <categories>
        <category>Hexo教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
</search>